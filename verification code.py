import httpx
import json

# üîπ Ton token d'acc√®s (‚ö†Ô∏è N'oublie pas de le r√©voquer apr√®s le test !)
ACCESS_TOKEN = "EAASbZB7O9ZBX0BO3WY6IdZBjXDkMXXRGSrvHbM0BJoGiZBW2uvClXuZBpWkZBWrvHOV2BubMvyw2oakbBye92y72YkDuwPt4uUNk3sYeZB7RzU7fjZAe7N7j9p1gdBJe09h8xFOwvObyP3cUuYxzlTZAWkECicLz5TW8iBeAbmxo0ByRZCV0JPOYoZCh1TORIQLTxKOUgZDZD"
PHONE_NUMBER_ID = "560695163788557"
RECIPIENT_PHONE = "+237657007446"

HEADERS = {
    "Authorization": f"Bearer {ACCESS_TOKEN}",
    "Content-Type": "application/json"
}

# üîπ URL de l'API WhatsApp Cloud
WHATSAPP_API_URL = f"https://graph.facebook.com/v17.0/{PHONE_NUMBER_ID}/messages"

# ‚úÖ 1Ô∏è‚É£ Tester l'Envoi d‚Äôun Message Template WhatsApp
def send_template_message():
    payload = {
        "messaging_product": "whatsapp",
        "to": RECIPIENT_PHONE,
        "type": "template",
        "template": {
            "name": "hello_world",  # ‚ö†Ô∏è Assure-toi que ce template est bien activ√© dans Meta Business Suite
            "language": {"code": "en_US"}
        }
    }

    try:
        response = httpx.post(WHATSAPP_API_URL, headers=HEADERS, json=payload)
        response.raise_for_status()  # D√©clenche une erreur si HTTP Status != 200
        print("\n‚úÖ Message envoy√© avec succ√®s :")
        print(json.dumps(response.json(), indent=2))
    except httpx.HTTPStatusError as e:
        print("\n‚ùå Erreur HTTP :", e.response.status_code, e.response.text)
    except httpx.RequestError as e:
        print("\n‚ùå Erreur R√©seau :", str(e))
    except Exception as e:
        print("\n‚ùå Erreur G√©n√©rale :", str(e))


# ‚úÖ 2Ô∏è‚É£ V√©rifier le Token d‚ÄôAcc√®s et les Permissions
def check_access_token():
    url = "https://graph.facebook.com/debug_token"
    params = {
        "input_token": ACCESS_TOKEN,
        "access_token": ACCESS_TOKEN  # V√©rifie le token avec lui-m√™me
    }

    try:
        response = httpx.get(url, params=params)
        response.raise_for_status()
        print("\n‚úÖ Token v√©rifi√© avec succ√®s :")
        print(json.dumps(response.json(), indent=2))
    except httpx.HTTPStatusError as e:
        print("\n‚ùå Erreur HTTP lors de la v√©rification du token :", e.response.status_code, e.response.text)
    except Exception as e:
        print("\n‚ùå Erreur lors de la v√©rification du token :", str(e))


# ‚úÖ 3Ô∏è‚É£ V√©rifier si ton num√©ro est bien activ√© pour l‚ÄôAPI WhatsApp
def check_phone_number_status():
    url = f"https://graph.facebook.com/v17.0/{PHONE_NUMBER_ID}"

    try:
        response = httpx.get(url, headers=HEADERS)
        response.raise_for_status()
        print("\n‚úÖ Num√©ro WhatsApp v√©rifi√© avec succ√®s :")
        print(json.dumps(response.json(), indent=2))
    except httpx.HTTPStatusError as e:
        print("\n‚ùå Erreur HTTP lors de la v√©rification du num√©ro :", e.response.status_code, e.response.text)
    except Exception as e:
        print("\n‚ùå Erreur lors de la v√©rification du num√©ro :", str(e))

# üîπ Ex√©cuter les Tests
if __name__ == "__main__":
    print("üîç D√©but des tests pour WhatsApp Cloud API...\n")
    
    check_access_token()         # V√©rifie si le token est valide
    check_phone_number_status()  # V√©rifie si le num√©ro est activ√©
    send_template_message()      # Envoie un message template pour tester
    
    print("\nüöÄ Tests termin√©s. V√©rifie les erreurs affich√©es et dis-moi o√π √ßa bloque !")
